{"version":3,"sources":["Crypto.js","App.js","index.js"],"names":["Crypto","name","image","symbol","price","volume","priceChange","mrktCap","className","src","alt","toLocaleString","toFixed","App","useState","cryptos","setCryptos","search","setSearch","useEffect","axios","get","then","res","data","catch","err","console","log","filteredCrypto","filter","crypto","toLowerCase","includes","type","placeholder","onChange","e","target","value","map","total_volume","current_price","price_change_percentage_24h","market_cap","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPA4BeA,EAzBA,SAAC,GAAgE,IAA/DC,EAA8D,EAA9DA,KAAMC,EAAwD,EAAxDA,MAAOC,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,QAC9D,OACI,qBAAKC,UAAU,mBAAf,SACI,sBAAKA,UAAU,aAAf,UACI,sBAAKA,UAAU,SAAf,UACI,qBAAKC,IAAKP,EAAOQ,IAAI,eADzB,mEAEI,6BAAKT,IACL,mBAAGO,UAAU,gBAAb,SAA8BL,OAElC,sBAAKK,UAAU,cAAf,UACI,oBAAGA,UAAU,eAAb,cAA8BJ,KAC9B,oBAAGI,UAAU,gBAAb,cAA+BH,EAAOM,oBAIrCL,EAAc,EAAK,mBAAGE,UAAU,qBAAb,SAAmCF,EAAYM,QAAQ,KACvD,mBAAGJ,UAAU,uBAAb,SAAqCF,EAAYM,QAAQ,KAE7E,oBAAGJ,UAAU,iBAAb,uBAAyCD,EAAQI,6B,MCmCtDE,MAnDf,WAEE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACRC,IACKC,IACG,2HAEHC,MAAK,SAACC,GACHP,EAAWO,EAAIC,SAElBC,OAAM,SAACC,GACJC,QAAQC,IAAI,wCAAyCF,QAE9D,IAED,IAIMG,EAAiBd,EAAQe,QAAO,SAAAC,GAAM,OAC1CA,EAAO9B,KAAK+B,cAAcC,SAAShB,EAAOe,kBAG5C,OACE,sBAAKxB,UAAU,aAAf,UACE,sBAAKA,UAAU,gBAAf,UACA,oBAAIA,UAAU,cAAd,yBACE,+BACE,uBAAO0B,KAAK,OAAOC,YAAY,SAASC,SAb3B,SAAAC,GACnBnB,EAAUmB,EAAEC,OAAOC,QAYmD/B,UAAU,sBAG7EqB,EAAeW,KAAI,SAAAT,GAClB,OACE,cAAC,EAAD,CAEA9B,KAAM8B,EAAO9B,KACbC,MAAO6B,EAAO7B,MACdC,OAAQ4B,EAAO5B,OACfE,OAAQ0B,EAAOU,aACfrC,MAAO2B,EAAOW,cACdpC,YAAayB,EAAOY,4BACpBpC,QAASwB,EAAOa,YAPXb,EAAOc,WCtCtBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.730c8f7b.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Crypto.css'\r\n\r\nconst Crypto = ({name, image, symbol, price, volume, priceChange, mrktCap}) => {                                       //named props received from App component \r\n    return (\r\n        <div className='crypto-container'>\r\n            <div className='crypto-row'>\r\n                <div className='crypto'>\r\n                    <img src={image} alt='crypto_img'/>                                                                {/*setting all props in the JSX to render on browser */}\r\n                    <h1>{name}</h1>\r\n                    <p className='crypto-symbol'>{symbol}</p>\r\n                </div>\r\n                <div className='crypto-data'>\r\n                    <p className='crypto-price'>${price}</p>\r\n                    <p className='crypto-volume'>${volume.toLocaleString()}</p>\r\n\r\n                    {/*this condition will check whether the price for a crypto has increased or decreased and based on those value it will change to the color to red or green*/}\r\n\r\n                    {priceChange < 0 ? (<p className='crypto-percent red'>{priceChange.toFixed(2)}</p>)\r\n                                     : (<p className='crypto-percent green'>{priceChange.toFixed(2)}</p>)\r\n                    }\r\n                    <p className='crypto-mrktcap'>Mkt Cap: ${mrktCap.toLocaleString()}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Crypto\r\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Crypto from './Crypto'\nimport './App.css'\n\nfunction App() {\n\n  const [cryptos, setCryptos] = useState([])\n  const [search, setSearch] = useState('')\n\n  useEffect(() => {\n    axios                                                                                                                                            //fetch the data from the API\n        .get(\n            'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1&sparkline=false'\n        )\n        .then((res) => {\n            setCryptos(res.data);                                                                                                                    //set the state with JSON object []\n        })\n        .catch((err) => {                                                                                                                            //if there's an error, it will be catche here\n            console.log('Error Fetching Data! See Error Code: '+ err);\n        })\n}, [])\n\n  const handleChange = e => {                                                                                                                        //based on the input from the user, this event will be triggered\n    setSearch(e.target.value)                                                                                                                        //value from <input> tag is set to this 'search' state\n  }\n\n  const filteredCrypto = cryptos.filter(crypto =>                                                                                                    //filter from the list of 'cryptos' state, only those state that are stored in 'search' state\n    crypto.name.toLowerCase().includes(search.toLowerCase())                                                                                         //and store it in filteredCrypto []\n    )\n\n  return (\n    <div className='crypto-app'>\n      <div className='crypto-search'>\n      <h1 className='crypto-text'>CryptoWatch</h1>\n        <form>\n          <input type='text' placeholder='search' onChange={handleChange} className='crypto-input'/>\n        </form>\n      </div>\n      {filteredCrypto.map(crypto => {                                                                                                                //now map through each of those individual filteredCryptos \n        return (\n          <Crypto                                                                                                                                    //and return a JSX with props to render on the web browser\n          key={crypto.id}\n          name={crypto.name} \n          image={crypto.image} \n          symbol={crypto.symbol} \n          volume={crypto.total_volume} \n          price={crypto.current_price} \n          priceChange={crypto.price_change_percentage_24h} \n          mrktCap={crypto.market_cap}/>\n        )\n      })}\n    </div>                                                                                                                                           //now the command goes to Crypto.js component to render the JSX\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}